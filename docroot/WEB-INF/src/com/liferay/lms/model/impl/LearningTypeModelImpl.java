/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.lms.model.impl;

import com.liferay.lms.model.LearningType;
import com.liferay.lms.model.LearningTypeModel;
import com.liferay.lms.model.LearningTypeSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

/**
 * The base model implementation for the LearningType service. Represents a row in the &quot;Lms_LearningType&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.lms.model.LearningTypeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LearningTypeImpl}.
 * </p>
 *
 * @author cvicente
 * @see LearningTypeImpl
 * @see com.liferay.lms.model.LearningType
 * @see com.liferay.lms.model.LearningTypeModel
 * @generated
 */
@JSON(strict = true)
public class LearningTypeModelImpl extends BaseModelImpl<LearningType>
	implements LearningTypeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a learning type model instance should use the {@link com.liferay.lms.model.LearningType} interface instead.
	 */
	public static final String TABLE_NAME = "Lms_LearningType";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "typeId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "className", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Lms_LearningType (uuid_ VARCHAR(75) null,typeId LONG not null primary key,name VARCHAR(75) null,className VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table Lms_LearningType";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.lms.model.LearningType"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.lms.model.LearningType"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.lms.model.LearningType"),
			true);
	public static long UUID_COLUMN_BITMASK = 1L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LearningType toModel(LearningTypeSoap soapModel) {
		LearningType model = new LearningTypeImpl();

		model.setUuid(soapModel.getUuid());
		model.setTypeId(soapModel.getTypeId());
		model.setName(soapModel.getName());
		model.setClassName(soapModel.getClassName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LearningType> toModels(LearningTypeSoap[] soapModels) {
		List<LearningType> models = new ArrayList<LearningType>(soapModels.length);

		for (LearningTypeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.lms.model.LearningType"));

	public LearningTypeModelImpl() {
	}

	public long getPrimaryKey() {
		return _typeId;
	}

	public void setPrimaryKey(long primaryKey) {
		setTypeId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_typeId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return LearningType.class;
	}

	public String getModelClassName() {
		return LearningType.class.getName();
	}

	@JSON
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	public long getTypeId() {
		return _typeId;
	}

	public void setTypeId(long typeId) {
		_typeId = typeId;
	}

	@JSON
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	public void setName(String name) {
		_name = name;
	}

	@JSON
	public String getClassName() {
		if (_className == null) {
			return StringPool.BLANK;
		}
		else {
			return _className;
		}
	}

	public void setClassName(String className) {
		_className = className;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public LearningType toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (LearningType)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					LearningType.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		LearningTypeImpl learningTypeImpl = new LearningTypeImpl();

		learningTypeImpl.setUuid(getUuid());
		learningTypeImpl.setTypeId(getTypeId());
		learningTypeImpl.setName(getName());
		learningTypeImpl.setClassName(getClassName());

		learningTypeImpl.resetOriginalValues();

		return learningTypeImpl;
	}

	public int compareTo(LearningType learningType) {
		long primaryKey = learningType.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		LearningType learningType = null;

		try {
			learningType = (LearningType)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = learningType.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		LearningTypeModelImpl learningTypeModelImpl = this;

		learningTypeModelImpl._originalUuid = learningTypeModelImpl._uuid;

		learningTypeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LearningType> toCacheModel() {
		LearningTypeCacheModel learningTypeCacheModel = new LearningTypeCacheModel();

		learningTypeCacheModel.uuid = getUuid();

		String uuid = learningTypeCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			learningTypeCacheModel.uuid = null;
		}

		learningTypeCacheModel.typeId = getTypeId();

		learningTypeCacheModel.name = getName();

		String name = learningTypeCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			learningTypeCacheModel.name = null;
		}

		learningTypeCacheModel.className = getClassName();

		String className = learningTypeCacheModel.className;

		if ((className != null) && (className.length() == 0)) {
			learningTypeCacheModel.className = null;
		}

		return learningTypeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", typeId=");
		sb.append(getTypeId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", className=");
		sb.append(getClassName());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.liferay.lms.model.LearningType");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typeId</column-name><column-value><![CDATA[");
		sb.append(getTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>className</column-name><column-value><![CDATA[");
		sb.append(getClassName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = LearningType.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			LearningType.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _typeId;
	private String _name;
	private String _className;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private LearningType _escapedModelProxy;
}