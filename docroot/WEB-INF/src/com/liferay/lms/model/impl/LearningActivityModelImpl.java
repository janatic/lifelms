/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.lms.model.impl;

import com.liferay.lms.model.LearningActivity;
import com.liferay.lms.model.LearningActivityModel;
import com.liferay.lms.model.LearningActivitySoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the LearningActivity service. Represents a row in the &quot;Lms_LearningActivity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.lms.model.LearningActivityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LearningActivityImpl}.
 * </p>
 *
 * @author cvicente
 * @see LearningActivityImpl
 * @see com.liferay.lms.model.LearningActivity
 * @see com.liferay.lms.model.LearningActivityModel
 * @generated
 */
@JSON(strict = true)
public class LearningActivityModelImpl extends BaseModelImpl<LearningActivity>
	implements LearningActivityModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a learning activity model instance should use the {@link com.liferay.lms.model.LearningActivity} interface instead.
	 */
	public static final String TABLE_NAME = "Lms_LearningActivity";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "actId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP },
			{ "title", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "typeId", Types.INTEGER },
			{ "startdate", Types.TIMESTAMP },
			{ "enddate", Types.TIMESTAMP },
			{ "precedence", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table Lms_LearningActivity (uuid_ VARCHAR(75) null,actId LONG not null primary key,companyId LONG,userId LONG,groupId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,title VARCHAR(75) null,description VARCHAR(75) null,typeId INTEGER,startdate DATE null,enddate DATE null,precedence INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table Lms_LearningActivity";
	public static final String ORDER_BY_JPQL = " ORDER BY learningActivity.startdate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Lms_LearningActivity.startdate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.lms.model.LearningActivity"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.lms.model.LearningActivity"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.lms.model.LearningActivity"),
			true);
	public static long GROUPID_COLUMN_BITMASK = 1L;
	public static long TYPEID_COLUMN_BITMASK = 2L;
	public static long UUID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LearningActivity toModel(LearningActivitySoap soapModel) {
		LearningActivity model = new LearningActivityImpl();

		model.setUuid(soapModel.getUuid());
		model.setActId(soapModel.getActId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setTitle(soapModel.getTitle());
		model.setDescription(soapModel.getDescription());
		model.setTypeId(soapModel.getTypeId());
		model.setStartdate(soapModel.getStartdate());
		model.setEnddate(soapModel.getEnddate());
		model.setPrecedence(soapModel.getPrecedence());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LearningActivity> toModels(
		LearningActivitySoap[] soapModels) {
		List<LearningActivity> models = new ArrayList<LearningActivity>(soapModels.length);

		for (LearningActivitySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.lms.model.LearningActivity"));

	public LearningActivityModelImpl() {
	}

	public long getPrimaryKey() {
		return _actId;
	}

	public void setPrimaryKey(long primaryKey) {
		setActId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_actId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return LearningActivity.class;
	}

	public String getModelClassName() {
		return LearningActivity.class.getName();
	}

	@JSON
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	public long getActId() {
		return _actId;
	}

	public void setActId(long actId) {
		_actId = actId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public int getStatus() {
		return _status;
	}

	public void setStatus(int status) {
		_status = status;
	}

	@JSON
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	public String getStatusByUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getStatusByUserId(), "uuid",
			_statusByUserUuid);
	}

	public void setStatusByUserUuid(String statusByUserUuid) {
		_statusByUserUuid = statusByUserUuid;
	}

	@JSON
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusByUserName;
		}
	}

	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	public Date getStatusDate() {
		return _statusDate;
	}

	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@JSON
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	public int getTypeId() {
		return _typeId;
	}

	public void setTypeId(int typeId) {
		_columnBitmask |= TYPEID_COLUMN_BITMASK;

		if (!_setOriginalTypeId) {
			_setOriginalTypeId = true;

			_originalTypeId = _typeId;
		}

		_typeId = typeId;
	}

	public int getOriginalTypeId() {
		return _originalTypeId;
	}

	@JSON
	public Date getStartdate() {
		return _startdate;
	}

	public void setStartdate(Date startdate) {
		_columnBitmask = -1L;

		_startdate = startdate;
	}

	@JSON
	public Date getEnddate() {
		return _enddate;
	}

	public void setEnddate(Date enddate) {
		_enddate = enddate;
	}

	@JSON
	public int getPrecedence() {
		return _precedence;
	}

	public void setPrecedence(int precedence) {
		_precedence = precedence;
	}

	/**
	 * @deprecated {@link #isApproved}
	 */
	public boolean getApproved() {
		return isApproved();
	}

	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public LearningActivity toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (LearningActivity)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
					LearningActivity.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		LearningActivityImpl learningActivityImpl = new LearningActivityImpl();

		learningActivityImpl.setUuid(getUuid());
		learningActivityImpl.setActId(getActId());
		learningActivityImpl.setCompanyId(getCompanyId());
		learningActivityImpl.setUserId(getUserId());
		learningActivityImpl.setGroupId(getGroupId());
		learningActivityImpl.setUserName(getUserName());
		learningActivityImpl.setCreateDate(getCreateDate());
		learningActivityImpl.setModifiedDate(getModifiedDate());
		learningActivityImpl.setStatus(getStatus());
		learningActivityImpl.setStatusByUserId(getStatusByUserId());
		learningActivityImpl.setStatusByUserName(getStatusByUserName());
		learningActivityImpl.setStatusDate(getStatusDate());
		learningActivityImpl.setTitle(getTitle());
		learningActivityImpl.setDescription(getDescription());
		learningActivityImpl.setTypeId(getTypeId());
		learningActivityImpl.setStartdate(getStartdate());
		learningActivityImpl.setEnddate(getEnddate());
		learningActivityImpl.setPrecedence(getPrecedence());

		learningActivityImpl.resetOriginalValues();

		return learningActivityImpl;
	}

	public int compareTo(LearningActivity learningActivity) {
		int value = 0;

		value = DateUtil.compareTo(getStartdate(),
				learningActivity.getStartdate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		LearningActivity learningActivity = null;

		try {
			learningActivity = (LearningActivity)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = learningActivity.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		LearningActivityModelImpl learningActivityModelImpl = this;

		learningActivityModelImpl._originalUuid = learningActivityModelImpl._uuid;

		learningActivityModelImpl._originalGroupId = learningActivityModelImpl._groupId;

		learningActivityModelImpl._setOriginalGroupId = false;

		learningActivityModelImpl._originalTypeId = learningActivityModelImpl._typeId;

		learningActivityModelImpl._setOriginalTypeId = false;

		learningActivityModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LearningActivity> toCacheModel() {
		LearningActivityCacheModel learningActivityCacheModel = new LearningActivityCacheModel();

		learningActivityCacheModel.uuid = getUuid();

		String uuid = learningActivityCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			learningActivityCacheModel.uuid = null;
		}

		learningActivityCacheModel.actId = getActId();

		learningActivityCacheModel.companyId = getCompanyId();

		learningActivityCacheModel.userId = getUserId();

		learningActivityCacheModel.groupId = getGroupId();

		learningActivityCacheModel.userName = getUserName();

		String userName = learningActivityCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			learningActivityCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			learningActivityCacheModel.createDate = createDate.getTime();
		}
		else {
			learningActivityCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			learningActivityCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			learningActivityCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		learningActivityCacheModel.status = getStatus();

		learningActivityCacheModel.statusByUserId = getStatusByUserId();

		learningActivityCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = learningActivityCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			learningActivityCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			learningActivityCacheModel.statusDate = statusDate.getTime();
		}
		else {
			learningActivityCacheModel.statusDate = Long.MIN_VALUE;
		}

		learningActivityCacheModel.title = getTitle();

		String title = learningActivityCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			learningActivityCacheModel.title = null;
		}

		learningActivityCacheModel.description = getDescription();

		String description = learningActivityCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			learningActivityCacheModel.description = null;
		}

		learningActivityCacheModel.typeId = getTypeId();

		Date startdate = getStartdate();

		if (startdate != null) {
			learningActivityCacheModel.startdate = startdate.getTime();
		}
		else {
			learningActivityCacheModel.startdate = Long.MIN_VALUE;
		}

		Date enddate = getEnddate();

		if (enddate != null) {
			learningActivityCacheModel.enddate = enddate.getTime();
		}
		else {
			learningActivityCacheModel.enddate = Long.MIN_VALUE;
		}

		learningActivityCacheModel.precedence = getPrecedence();

		return learningActivityCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(37);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", actId=");
		sb.append(getActId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", typeId=");
		sb.append(getTypeId());
		sb.append(", startdate=");
		sb.append(getStartdate());
		sb.append(", enddate=");
		sb.append(getEnddate());
		sb.append(", precedence=");
		sb.append(getPrecedence());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(58);

		sb.append("<model><model-name>");
		sb.append("com.liferay.lms.model.LearningActivity");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actId</column-name><column-value><![CDATA[");
		sb.append(getActId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typeId</column-name><column-value><![CDATA[");
		sb.append(getTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startdate</column-name><column-value><![CDATA[");
		sb.append(getStartdate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>enddate</column-name><column-value><![CDATA[");
		sb.append(getEnddate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>precedence</column-name><column-value><![CDATA[");
		sb.append(getPrecedence());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = LearningActivity.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			LearningActivity.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _actId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserUuid;
	private String _statusByUserName;
	private Date _statusDate;
	private String _title;
	private String _description;
	private int _typeId;
	private int _originalTypeId;
	private boolean _setOriginalTypeId;
	private Date _startdate;
	private Date _enddate;
	private int _precedence;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private LearningActivity _escapedModelProxy;
}